{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "date-picker",
  "type": "registry:component",
  "registryDependencies": [
    "button",
    "input",
    "label",
    "https://localhost:3000/r/card.json"
  ],
  "files": [
    {
      "path": "registry/date-picker/date-picker.tsx",
      "content": "'use client';\n\nimport { Slot } from '@radix-ui/react-slot';\nimport * as datePicker from '@zag-js/date-picker';\nimport { normalizeProps, Portal, useMachine } from '@zag-js/react';\nimport { ChevronLeft, ChevronRight } from 'lucide-react';\nimport {\n  createContext,\n  use,\n  useId,\n  type ComponentProps,\n  type ReactNode,\n} from 'react';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { cn } from '~/lib/utils';\nimport { Card } from '~registry/card/card';\n\ntype AsChild = {\n  asChild?: boolean;\n};\n\nconst DatePickerContext = createContext<ReturnType<\n  typeof datePicker.connect\n> | null>(null);\nconst useDatePicker = () => {\n  const ctx = use(DatePickerContext);\n  if (!ctx) throw new Error('Must be used within <DatePickerProvider>');\n  return ctx;\n};\n\ntype DatePickerProviderProps = Omit<datePicker.Props, 'id'> & {\n  children?: ReactNode;\n  id?: string;\n};\n\nexport function DatePickerProvider({\n  children,\n  id: customId,\n  ...props\n}: DatePickerProviderProps) {\n  const id = useId();\n  const service = useMachine(datePicker.machine, {\n    id: customId ?? id,\n    ...props,\n  });\n  const api = datePicker.connect(service, normalizeProps);\n  return <DatePickerContext value={api}>{children}</DatePickerContext>;\n}\n\nexport function DatePickerRoot({\n  asChild,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useDatePicker();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp data-slot=\"date-picker-root\" {...api.getRootProps()} {...props} />\n  );\n}\n\nexport function DatePickerControl({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useDatePicker();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn('flex gap-2', className)}\n      data-slot=\"date-picker-control\"\n      {...api.getControlProps()}\n      {...props}\n    />\n  );\n}\n\nexport function DatePickerInput({\n  fixOnBlur,\n  index,\n  ...props\n}: ComponentProps<typeof Input> & datePicker.InputProps) {\n  const api = useDatePicker();\n  return (\n    <Input\n      data-slot=\"date-picker-input\"\n      {...api.getInputProps({ fixOnBlur, index })}\n      {...props}\n    />\n  );\n}\n\nexport function DatePickerTrigger(props: ComponentProps<typeof Button>) {\n  const api = useDatePicker();\n  return <Button {...api.getTriggerProps()} {...props} />;\n}\n\nexport function DatePickerPositioner({\n  asChild,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useDatePicker();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      data-slot=\"date-picker-positioner\"\n      {...api.getPositionerProps()}\n      {...props}\n    />\n  );\n}\n\nexport function DatePickerContent({\n  className,\n  ...props\n}: ComponentProps<typeof Card>) {\n  const api = useDatePicker();\n  return (\n    <Card\n      className={cn('p-0', className)}\n      data-slot=\"date-picker-content\"\n      {...api.getContentProps()}\n      {...props}\n    />\n  );\n}\n\nexport function DatePickerDayView() {\n  const api = useDatePicker();\n  return (\n    <div className=\"grid gap-2 p-2\" hidden={api.view !== 'day'}>\n      <div\n        className=\"flex items-center justify-between gap-2\"\n        {...api.getViewControlProps({ view: 'year' })}\n      >\n        <Button\n          {...api.getPrevTriggerProps()}\n          size=\"icon\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          <ChevronLeft />\n        </Button>\n        <Button\n          {...api.getViewTriggerProps()}\n          size=\"sm\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          {api.visibleRangeText.start}\n        </Button>\n        <Button\n          {...api.getNextTriggerProps()}\n          size=\"icon\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          <ChevronRight />\n        </Button>\n      </div>\n\n      <table {...api.getTableProps({ view: 'day' })}>\n        <thead {...api.getTableHeaderProps({ view: 'day' })}>\n          <tr {...api.getTableRowProps({ view: 'day' })}>\n            {api.weekDays.map((day, i) => (\n              <th aria-label={day.long} key={i} scope=\"col\">\n                {day.narrow}\n              </th>\n            ))}\n          </tr>\n        </thead>\n        <tbody {...api.getTableBodyProps({ view: 'day' })}>\n          {api.weeks.map((week, weekIdx) => (\n            <tr key={weekIdx} {...api.getTableRowProps({ view: 'day' })}>\n              {week.map((value, i) => (\n                <td key={i} {...api.getDayTableCellProps({ value })}>\n                  <Button\n                    className=\"text-right\"\n                    size=\"icon\"\n                    type=\"button\"\n                    variant=\"ghost\"\n                    {...api.getDayTableCellTriggerProps({ value })}\n                  >\n                    {value.day}\n                  </Button>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport function DatePickerMonthView() {\n  const api = useDatePicker();\n  return (\n    <div className=\"grid gap-2 p-2\" hidden={api.view !== 'month'}>\n      <div\n        className=\"flex items-center justify-between gap-2\"\n        {...api.getViewControlProps({ view: 'month' })}\n      >\n        <Button\n          {...api.getPrevTriggerProps({ view: 'month' })}\n          size=\"icon\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          <ChevronLeft />\n        </Button>\n        <Button\n          {...api.getViewTriggerProps({ view: 'month' })}\n          size=\"sm\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          {api.visibleRange.start.year}\n        </Button>\n        <Button\n          {...api.getNextTriggerProps({ view: 'month' })}\n          size=\"icon\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          <ChevronRight />\n        </Button>\n      </div>\n\n      <table {...api.getTableProps({ view: 'month', columns: 4 })}>\n        <tbody {...api.getTableBodyProps({ view: 'month' })}>\n          {api\n            .getMonthsGrid({ columns: 4, format: 'short' })\n            .map((months, row) => (\n              <tr key={row} {...api.getTableRowProps()}>\n                {months.map((month, index) => (\n                  <td\n                    key={index}\n                    {...api.getMonthTableCellProps({\n                      ...month,\n                      columns: 4,\n                    })}\n                  >\n                    <Button\n                      className=\"w-full\"\n                      type=\"button\"\n                      variant=\"ghost\"\n                      {...api.getMonthTableCellTriggerProps({\n                        ...month,\n                        columns: 4,\n                      })}\n                    >\n                      {month.label}\n                    </Button>\n                  </td>\n                ))}\n              </tr>\n            ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport function DatePickerYearView() {\n  const api = useDatePicker();\n  return (\n    <div className=\"grid gap-2 p-2\" hidden={api.view !== 'year'}>\n      <div\n        className=\"flex items-center justify-between gap-2\"\n        {...api.getViewControlProps({ view: 'year' })}\n      >\n        <Button\n          {...api.getPrevTriggerProps({ view: 'year' })}\n          size=\"icon\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          <ChevronLeft />\n        </Button>\n        <span className=\"text-sm font-medium\">\n          {api.getDecade().start} - {api.getDecade().end}\n        </span>\n        <Button\n          {...api.getNextTriggerProps({ view: 'year' })}\n          size=\"icon\"\n          type=\"button\"\n          variant=\"ghost\"\n        >\n          <ChevronRight />\n        </Button>\n      </div>\n\n      <table {...api.getTableProps({ view: 'year', columns: 4 })}>\n        <tbody {...api.getTableBodyProps()}>\n          {api.getYearsGrid({ columns: 4 }).map((years, row) => (\n            <tr key={row} {...api.getTableRowProps({ view: 'year' })}>\n              {years.map((year, index) => (\n                <td\n                  key={index}\n                  {...api.getYearTableCellProps({\n                    ...year,\n                    columns: 4,\n                  })}\n                >\n                  <Button\n                    className=\"w-full\"\n                    size=\"sm\"\n                    type=\"button\"\n                    variant=\"ghost\"\n                    {...api.getYearTableCellTriggerProps({\n                      ...year,\n                      columns: 4,\n                    })}\n                  >\n                    {year.label}\n                  </Button>\n                </td>\n              ))}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n\nexport const DatePickerPortal = Portal;\n\nexport function DatePickerCalendar() {\n  return (\n    <DatePickerContent>\n      <DatePickerDayView />\n      <DatePickerMonthView />\n      <DatePickerYearView />\n    </DatePickerContent>\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}
