{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "combobox",
  "type": "registry:component",
  "registryDependencies": ["button", "input", "label"],
  "files": [
    {
      "path": "registry/combobox/combobox.tsx",
      "content": "/* eslint-disable @typescript-eslint/no-unsafe-assignment -- items can be anything */\n\n'use client';\n\nimport { Slot } from '@radix-ui/react-slot';\nimport * as combobox from '@zag-js/combobox';\nimport {\n  normalizeProps,\n  Portal,\n  useMachine,\n  type PropTypes,\n} from '@zag-js/react';\nimport {\n  createContext,\n  use,\n  useId,\n  type ComponentProps,\n  type ReactNode,\n} from 'react';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { Label } from '~/components/ui/label';\nimport { cn } from '~/lib/utils';\n\ntype AsChild = {\n  asChild?: boolean;\n};\n\nconst ComboboxContext = createContext<combobox.Api<PropTypes> | null>(null);\n\nfunction useApi() {\n  const ctx = use(ComboboxContext);\n  if (!ctx) throw new Error('Should be inside a <ComboboxProvider>');\n  return ctx;\n}\n\nexport type ComboboxProps = {\n  children?: ReactNode;\n  id?: string;\n  collection: Parameters<typeof combobox.collection>[0];\n} & Omit<combobox.Props, 'id' | 'collection'>;\n\nexport function ComboboxProvider({\n  children,\n  id: idProp,\n  collection,\n  ...props\n}: ComboboxProps) {\n  const id = useId();\n  const service = useMachine(combobox.machine, {\n    id: idProp ?? id,\n    collection: combobox.collection(collection),\n    ...props,\n  });\n  const api = combobox.connect(service, normalizeProps);\n  return <ComboboxContext value={api}>{children}</ComboboxContext>;\n}\n\nexport function ComboboxRoot({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn('grid gap-2', className)}\n      data-slot=\"combobox-root\"\n      {...api.getRootProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxLabel(props: ComponentProps<typeof Label>) {\n  const api = useApi();\n  return (\n    <Label data-slot=\"combobox-label\" {...api.getLabelProps()} {...props} />\n  );\n}\n\nexport function ComboboxControl({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn('flex gap-2', className)}\n      data-slot=\"combobox-control\"\n      {...api.getControlProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxTrigger({\n  focusable,\n  ...props\n}: ComponentProps<typeof Button> & combobox.TriggerProps) {\n  const api = useApi();\n  return (\n    <Button\n      data-slot=\"combobox-trigger\"\n      {...api.getTriggerProps({ focusable })}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxClearTrigger(props: ComponentProps<typeof Button>) {\n  const api = useApi();\n  return (\n    <Button\n      data-slot=\"combobox-clear-trigger\"\n      {...api.getClearTriggerProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxInput(props: ComponentProps<typeof Input>) {\n  const api = useApi();\n  return <Input {...api.getInputProps()} {...props} />;\n}\n\nexport const ComboboxPortal = Portal;\n\nexport function ComboboxPositioner({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn('mt-1 w-full', className)}\n      data-slot=\"combobox-positioner\"\n      {...api.getPositionerProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxContent({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn(\n        'bg-popover text-popover-foreground w-[var(--reference-width)] rounded-md border shadow-md',\n        className,\n      )}\n      data-slot=\"combobox-content\"\n      {...api.getContentProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxList({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn('max-h-60 overflow-y-auto p-1', className)}\n      data-slot=\"combobox-list\"\n      {...api.getListProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxItemGroup({\n  asChild,\n  ...props\n}: ComponentProps<'div'> & AsChild & combobox.ItemGroupProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      data-slot=\"combobox-item-group\"\n      {...api.getItemGroupProps({ id: props.id })}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxItemGroupLabel({\n  className,\n  ...props\n}: ComponentProps<typeof Label> & combobox.ItemGroupLabelProps) {\n  const api = useApi();\n  return (\n    <Label\n      className={cn(\n        'text-muted-foreground px-2 py-1.5 text-xs font-semibold',\n        className,\n      )}\n      data-slot=\"combobox-item-group-label\"\n      {...api.getItemGroupLabelProps({ htmlFor: props.htmlFor })}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxItem({\n  asChild,\n  item,\n  persistFocus,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & combobox.ItemProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn(\n        'group flex cursor-default items-center justify-between rounded-sm px-2 py-1.5 text-sm outline-none select-none',\n        'aria-selected:bg-accent aria-selected:text-accent-foreground',\n        className,\n      )}\n      data-slot=\"combobox-item\"\n      {...api.getItemProps({ item, persistFocus })}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxItemText({\n  asChild,\n  item,\n  persistFocus,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & combobox.ItemProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn('group-hover:text-accent-foreground', className)}\n      data-slot=\"combobox-item-text\"\n      {...api.getItemTextProps({ item, persistFocus })}\n      {...props}\n    />\n  );\n}\n\nexport function ComboboxItemIndicator({\n  asChild,\n  item,\n  persistFocus,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & combobox.ItemProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n  return (\n    <Comp\n      className={cn('text-primary ml-2', className)}\n      data-slot=\"combobox-item-indicator\"\n      {...api.getItemIndicatorProps({ item, persistFocus })}\n      {...props}\n    />\n  );\n}\n\n/* eslint-enable @typescript-eslint/no-unsafe-assignment -- re-enable */\n",
      "type": "registry:ui"
    }
  ]
}
