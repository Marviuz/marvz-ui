{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "color-picker",
  "type": "registry:component",
  "files": [
    {
      "path": "registry/color-picker/color-picker.tsx",
      "content": "'use client';\n\nimport { Slot } from '@radix-ui/react-slot';\nimport * as colorPicker from '@zag-js/color-picker';\nimport {\n  normalizeProps,\n  Portal,\n  useMachine,\n  type PropTypes,\n} from '@zag-js/react';\nimport {\n  createContext,\n  use,\n  useId,\n  type ComponentProps,\n  type ReactNode,\n} from 'react';\nimport { Button } from '~/components/ui/button';\nimport { Input } from '~/components/ui/input';\nimport { Label } from '~/components/ui/label';\nimport { cn } from '~/lib/utils';\nimport { Card } from '~registry/card/card';\n\ntype AsChild = {\n  asChild?: boolean;\n};\n\nconst ColorPicker = createContext<colorPicker.Api<PropTypes> | null>(null);\n\nfunction useApi() {\n  const ctx = use(ColorPicker);\n  if (!ctx) throw new Error('Should be inside a <ColorPickerProvider>');\n  return ctx;\n}\n\ntype ColorPickerProps = Partial<colorPicker.Props> & {\n  children?: ReactNode;\n};\n\nexport function ColorPickerProvider({ children, ...props }: ColorPickerProps) {\n  const id = useId();\n  const service = useMachine(colorPicker.machine, { id, ...props });\n  const api = colorPicker.connect(service, normalizeProps);\n\n  return (\n    <ColorPicker value={api}>\n      {children}\n      <input\n        data-slot=\"color-picker-hidden-input\"\n        {...api.getHiddenInputProps()}\n      />\n    </ColorPicker>\n  );\n}\n\nexport function ColorPickerRoot({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn('relative', className)}\n      data-slot=\"color-picker-root\"\n      {...api.getRootProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerLabel({\n  className,\n  ...props\n}: ComponentProps<typeof Label>) {\n  const api = useApi();\n\n  return (\n    <Label\n      className={cn(\n        'text-sm leading-none font-medium peer-disabled:cursor-not-allowed peer-disabled:opacity-70',\n        className,\n      )}\n      data-slot=\"color-picker-label\"\n      {...api.getLabelProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerControl({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn('flex items-center gap-2', className)}\n      data-slot=\"color-picker-control\"\n      {...api.getControlProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerTrigger({\n  className,\n  ...props\n}: ComponentProps<typeof Button>) {\n  const api = useApi();\n\n  return (\n    <Button\n      className={cn('h-10 w-12 border-2 p-0', className)}\n      data-slot=\"color-picker-trigger\"\n      variant=\"outline\"\n      {...api.getTriggerProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerTransparencyGrid({\n  asChild,\n  size = '10px',\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & colorPicker.TransparencyGridProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn('rounded-md', className)}\n      data-slot=\"color-picker-transparency-grid\"\n      {...api.getTransparencyGridProps({ size })}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerSwatch({\n  asChild,\n  respectAlpha,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & Omit<colorPicker.SwatchProps, 'value'>) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn('border-border h-full w-full rounded-md border', className)}\n      data-slot=\"color-picker-swatch\"\n      {...api.getSwatchProps({ value: api.value, respectAlpha })}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerChannelInput({\n  channel,\n  orientation,\n  className,\n  ...props\n}: ComponentProps<'input'> & colorPicker.ChannelInputProps) {\n  const api = useApi();\n\n  return (\n    <Input\n      className={cn('h-8 text-xs', className)}\n      data-slot=\"color-picker-channel-input\"\n      {...api.getChannelInputProps({ channel, orientation })}\n      {...props}\n    />\n  );\n}\n\nexport const ColorPickerPortal = Portal;\n\nexport function ColorPickerPositioner({\n  asChild,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn('z-50', className)}\n      data-slot=\"color-picker-positioner\"\n      {...api.getPositionerProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerContent({\n  className,\n  ...props\n}: ComponentProps<typeof Card>) {\n  const api = useApi();\n\n  return (\n    <Card\n      className={cn(\n        'bg-popover text-popover-foreground w-64 border p-4 shadow-lg',\n        'data-[state=open]:animate-in data-[state=closed]:animate-out',\n        'data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0',\n        'data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95',\n        className,\n      )}\n      data-slot=\"color-picker-content\"\n      {...api.getContentProps()}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerArea({\n  asChild,\n  xChannel,\n  yChannel,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & colorPicker.AreaProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn(\n        'border-border relative h-32 w-full cursor-crosshair overflow-hidden rounded-md border',\n        className,\n      )}\n      data-slot=\"color-picker-area\"\n      {...api.getAreaProps({ xChannel, yChannel })}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerAreaBackground({\n  asChild,\n  xChannel,\n  yChannel,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & colorPicker.AreaProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn('absolute inset-0 h-full', className)}\n      data-slot=\"color-picker-area-background\"\n      {...api.getAreaBackgroundProps({ xChannel, yChannel })}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerAreaThumb({\n  asChild,\n  xChannel,\n  yChannel,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & colorPicker.AreaProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn(\n        'absolute h-4 w-4 rounded-full border-2 border-white shadow-lg',\n        '-translate-x-1/2 -translate-y-1/2 transform',\n        'focus:ring-ring focus:ring-2 focus:ring-offset-2 focus:outline-none',\n        className,\n      )}\n      data-slot=\"color-picker-area-thumb\"\n      {...api.getAreaThumbProps({ xChannel, yChannel })}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerChannelSlider({\n  asChild,\n  channel,\n  format,\n  orientation,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & colorPicker.ChannelSliderProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn(\n        'border-border relative h-4 w-full cursor-pointer overflow-hidden rounded-md border',\n        className,\n      )}\n      data-slot=\"color-picker-channel-slider\"\n      {...api.getChannelSliderProps({ channel, format, orientation })}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerChannelSliderTrack({\n  asChild,\n  channel,\n  format,\n  orientation,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & colorPicker.ChannelSliderProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn('absolute inset-0 h-full', className)}\n      data-slot=\"color-picker-channel-slider-track\"\n      {...api.getChannelSliderTrackProps({ channel, format, orientation })}\n      {...props}\n    />\n  );\n}\n\nexport function ColorPickerChannelSliderThumb({\n  asChild,\n  channel,\n  format,\n  orientation,\n  className,\n  ...props\n}: ComponentProps<'div'> & AsChild & colorPicker.ChannelSliderProps) {\n  const api = useApi();\n  const Comp = asChild ? Slot : 'div';\n\n  return (\n    <Comp\n      className={cn(\n        'absolute top-1/2 h-4 w-4 rounded-full border-2 shadow-lg',\n        '-translate-x-1/2 -translate-y-1/2 transform',\n        'focus:ring-ring focus:ring-2 focus:ring-offset-2 focus:outline-none',\n        className,\n      )}\n      data-slot=\"color-picker-channel-slider-thumb\"\n      {...api.getChannelSliderThumbProps({ channel, format, orientation })}\n      {...props}\n    />\n  );\n}\n",
      "type": "registry:ui"
    }
  ]
}
